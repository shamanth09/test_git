<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security/oauth2 
	http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

	<http pattern="/token/**" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager"
		use-expressions="true">
		<csrf disabled="true" />
		<intercept-url pattern="/token/**" access="isFullyAuthenticated()" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<anonymous enabled="false" />
		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<custom-filter ref="oAuth2AuthenticationFilter" before="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>


	<!-- Client Entry Point -->
	<beans:bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<beans:property name="realmName" value="test/client"></beans:property>
		<beans:property name="typeName" value="Basic"></beans:property>
		<beans:property name="exceptionRenderer" ref="headerOnlyExceptionRender"></beans:property>
	</beans:bean>

	<beans:bean id="headerOnlyExceptionRender"
		class="com.mrk.myordershop.security.oauth.HeaderOnlyOAuth2ExceptionRenderer"></beans:bean>

	<!-- Access Denied Handler -->
	<beans:bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
		<beans:property name="exceptionRenderer" ref="headerOnlyExceptionRender"></beans:property>
	</beans:bean>

	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="clientAuthenticationManager" />
		<beans:property name="filterProcessesUrl" value="/token" />
	</beans:bean>

	<beans:bean id="oAuth2AuthenticationFilter"
		class="com.mrk.myordershop.log.filter.OAuth2ServerAuthenticationFilterImpl">
		<beans:constructor-arg ref="tokenServices" />
	</beans:bean>

	<!-- Client Authentication Manager -->
	<authentication-manager id="clientAuthenticationManager">
		<authentication-provider user-service-ref="clientDetailsUserService">
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetails" />
	</beans:bean>

	<!-- Client Details -->
	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="myordershopios" secret="myordershopios123"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			authorities="CLIENT, TRUSTED_CLIENT" scope="read,write,trust" />
		<oauth:client client-id="myordershopweb" secret="myordershopweb123"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			authorities="CLIENT, TRUSTED_CLIENT" scope="read,write,trust" />
		<oauth:client client-id="myordershopandroid" secret="myordershopandroid123"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			authorities="CLIENT, TRUSTED_CLIENT" scope="read,write,trust" />
	</oauth:client-details-service>

	<!-- To Manage Client Auth Dynamically -->
	<!-- <beans:bean id="clientDetails" class="com.mnr.test.oauth.service.CustomClientDetailService"> 
		<beans:property name="id" value="mysupplycompany" /> <beans:property name="secretKey" 
		value="mycompanykey" /> </beans:bean> -->

	<!-- User Authentication Manager -->
	<authentication-manager id="userAuthenticationManager">
		<authentication-provider user-service-ref="oauthUserDetailsService" />
		<!-- <authentication-provider> <user-service> <user name="myuser1" authorities="ROLE_USER" 
			password="mypassword" /> </user-service> </authentication-provider> -->
	</authentication-manager>

	<beans:bean id="oauthUserDetailsService"
		class="com.mrk.myordershop.security.oauth.service.OauthUserDetailsService"></beans:bean>

	<oauth:authorization-server
		token-endpoint-url="/token" authorization-endpoint-url="/authorize"
		client-details-service-ref="clientDetails" token-services-ref="tokenServices">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password authentication-manager-ref="userAuthenticationManager" />
	</oauth:authorization-server>

	<beans:bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="true" />
		<beans:property name="accessTokenValiditySeconds"
			value="86400" />
		<beans:property name="clientDetailsService" ref="clientDetails" /> 
	</beans:bean>

	<!-- JDBC Token Service -->
	<beans:bean id="tokenStore"
		class="com.mrk.myordershop.security.oauth.service.MOSJdbcTokenStore">
		<beans:constructor-arg ref="dataSource" />
	</beans:bean>

	<!-- InMemory Token Service -->
	<!-- <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" 
		/> -->

</beans:beans>